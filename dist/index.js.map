{"version":3,"file":"index.js","sources":["../node_modules/@x-drive/utils/dist/index.esm.js","../src/index.ts"],"sourcesContent":["/**\r\n * 数据类型判断\r\n * @param  subject 待判断的数据\r\n * @param  type    数据类型名字\r\n * @return         判断结果\r\n */\r\nfunction is(subject, type) {\r\n    return Object.prototype.toString.call(subject).substr(8, type.length).toLowerCase() === type;\r\n}\n\n/**\r\n * 是否是数组\r\n * @param  subject 待判断的数据\r\n */\r\nfunction isObject(subject) {\r\n    return is(subject, \"object\");\r\n}\n\n/**\r\n * 是否 undefined\r\n * @param  subject 待判断的数据\r\n */\r\nfunction isUndefined(subject) {\r\n    return is(subject, \"undefined\");\r\n}\n\n/**\r\n * 带花括号标签检测正则\r\n * @type {RegExp}\r\n */\r\nvar labelReplaceExp = /\\{(\\w+)\\}/g;\r\n/**\r\n * 批量替换字符串中带花括号标签为指定数据\r\n * @param  tpl  待处理的字符串\r\n * @param  data 替换数据\r\n * @param  keep 是否保留未能解析的标签\r\n * @return      替换后端字符串\r\n * @example\r\n * ```tsx\r\n * labelReplace('{a}/{b}/c', {a: 1, b: 2}) // 1/2/c\r\n * labelReplace('{a}/{b}/c', {a: 1}, true) // 1/{b}/c\r\n * ```\r\n */\r\nfunction labelReplace(tpl, data, keep) {\n    if ( keep === void 0 ) keep = false;\n\r\n    return tpl.replace(labelReplaceExp, function (_, key) {\r\n        var re = isObject(data) ? data[key] : data;\r\n        if (isUndefined(re) && keep) {\r\n            return _;\r\n        }\r\n        return re;\r\n    });\r\n}\n\n/**\r\n * 是否是数组且长度大于0\r\n * @param  subject 待判断的数据\r\n */\r\nfunction isValidArray(subject) {\r\n    return Array.isArray(subject) && subject.length > 0;\r\n}\n\n/**\r\n * 伪数组转成数组\r\n * @param   args 伪数组对象\r\n * @return       转化后的数组\r\n */\r\nfunction toArray(args) {\r\n    return Array.prototype.slice.call(args);\r\n}\n\n/**\r\n * 是否是函数\r\n * @param  subject 待判断的数据\r\n */\r\nfunction isFunction(subject) {\r\n    return is(subject, \"function\");\r\n}\n\n/**\r\n * 是否是数组\r\n * @param  subject 待判断的数据\r\n */\r\nfunction isArray(subject) {\r\n    return Array.isArray(subject);\r\n}\n\n/**\r\n * 通用遍历函数\r\n * @param  data    待遍历数据\r\n * @param  handler 处理函数\r\n * @param  context 作用域\r\n */\r\nfunction each(data, handler, context) {\r\n    context = context || this;\r\n    var hasHandler = isFunction(handler);\r\n    if (isArray(data)) {\r\n        for (var i = 0; i < data.length; i++) {\r\n            var re = true;\r\n            if (hasHandler) {\r\n                re = handler.call(context, data[i], i);\r\n            }\r\n            if (re === false) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    else if (isObject(data)) {\r\n        var keys = Object.keys(data);\r\n        for (var i$1 = 0; i$1 < keys.length; i$1++) {\r\n            var re$1 = true;\r\n            if (hasHandler) {\r\n                re$1 = handler.call(context, data[keys[i$1]], keys[i$1]);\r\n            }\r\n            if (re$1 === false) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\n\n/**\r\n * 对象扩展方法\r\n * @return 合并后的对象\r\n */\r\nfunction extend() {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\r\n    var dat = args.shift();\r\n    if (dat) {\r\n        if (args.length) {\r\n            while (args.length) {\r\n                var item = args.shift();\r\n                if (item) {\r\n                    each(item, function (val, key) {\r\n                        dat[key] = val;\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        return dat;\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * 合并\r\n * @param target  合并基准对象\r\n * @param sources 后续合并对象\r\n */\r\nfunction merge(target) {\n    var obj, obj$1;\n\n    var sources = [], len = arguments.length - 1;\n    while ( len-- > 0 ) sources[ len ] = arguments[ len + 1 ];\r\n    if (!sources.length)\r\n        { return target; }\r\n    var source = sources.shift();\r\n    if (isObject(target) && isObject(source)) {\r\n        for (var key in source) {\r\n            if (isObject(source[key])) {\r\n                if (!target[key]) {\r\n                    Object.assign(target, ( obj = {}, obj[key] = {}, obj ));\r\n                }\r\n                merge(target[key], source[key]);\r\n            }\r\n            else {\r\n                Object.assign(target, ( obj$1 = {}, obj$1[key] = source[key], obj$1 ));\r\n            }\r\n        }\r\n    }\r\n    return merge.apply(void 0, [ target ].concat( sources ));\r\n}\n\n/**\r\n * 是否是字符串\r\n * @param  subject 待判断的数据\r\n */\r\nfunction isString(subject) {\r\n    return is(subject, \"string\");\r\n}\n\n/**\r\n * 大写字母匹配正则\r\n */\r\nvar UPPER_CASE_REGEXP = /[A-Z]/g;\r\n/**\r\n * 转化为蛇形命名\r\n * @param  str 待处理的字符串\r\n * @return     处理后的字符串\r\n */\r\nfunction toUnderlineName(str) {\r\n    if (isString(str)) {\r\n        return str.replace(UPPER_CASE_REGEXP, function (m, i) { return (\"\" + (i ? '_' : '') + (m.toLowerCase())); });\r\n    }\r\n    return str;\r\n}\n\n/**\r\n * 简单复制\r\n * @param  item 原始数据\r\n * @return      复制后的数据\r\n */\r\nfunction copy(item) {\r\n    return JSON.parse(JSON.stringify(item));\r\n}\n\n/**\r\n * 格式化数字, 自动补0前续\r\n * @param  number 要格式化的数字\r\n * @param  size   格式化后出来的数字位数\r\n * @return        格式化结果\r\n */\r\nfunction fix0(number, size) {\r\n    number = number.toString();\r\n    while ((number).length < size) {\r\n        number = '0' + number;\r\n    }\r\n    return number;\r\n}\n\n/**\r\n * 是否是数字\r\n * @param  subject 待判断的数据\r\n */\r\nfunction isNumber(subject) {\r\n    return !isNaN(subject) && is(subject, \"number\");\r\n}\n\n/**\r\n * 是否是 null\r\n * @param  subject 待判断的数据\r\n */\r\nfunction isNull(subject) {\r\n    return is(subject, \"null\");\r\n}\n\n/**\r\n * 按位数格式化数字\r\n * @param  val       要格式化的数字\r\n * @param  separator 分割符\r\n * @param  size      分割位数间隔\r\n * @return           格式化完的字符串\r\n */\r\nfunction numberFormat(val, separator, size) {\r\n    if (!isNumber(val)) {\r\n        return \"0\";\r\n    }\r\n    if (isUndefined(separator) || isNull(separator)) {\r\n        separator = \",\";\r\n    }\r\n    if (!isNumber(size)) {\r\n        size = 3;\r\n    }\r\n    var last = size;\r\n    val = val.toString();\r\n    var pos = val.indexOf(\".\");\r\n    var res = \"\";\r\n    if (pos === -1) {\r\n        pos = val.length;\r\n    }\r\n    else {\r\n        res = val.substr(pos);\r\n    }\r\n    if (val.charAt(0) === \"-\") {\r\n        last++;\r\n    }\r\n    while (pos > last) {\r\n        pos -= size;\r\n        res = separator + val.substr(pos, size) + res;\r\n    }\r\n    if (pos) {\r\n        res = val.substr(0, pos) + res;\r\n    }\r\n    return res;\r\n}\n\n/**\r\n * 数组随机分布\r\n * @param  arr  原始数组\r\n * @return      打乱后的数组\r\n */\r\nfunction shuffle(arr) {\r\n    for (var i = arr.length - 1; i >= 0; i--) {\r\n        var rIndex = Math.floor(Math.random() * (i + 1));\r\n        var item = arr[rIndex];\r\n        arr[rIndex] = arr[i];\r\n        arr[i] = item;\r\n    }\r\n    return arr;\r\n}\n\n/**\r\n * 获取包含指定范围内的随机数\r\n * @param  max 最大范围(包含)\r\n * @param  min 最小范围(包含，默认 0)\r\n * @return     随机数\r\n */\r\nfunction random(max, min) {\r\n    if (min === undefined) {\r\n        min = 0;\r\n    }\r\n    return Math.round(Math.random() * (max - min) + min);\r\n}\n\n/**\r\n * 序列化请求参数\r\n * @param  query 参数对象\r\n * @return       参数字符串\r\n */\r\nfunction serialize(query, encode) {\n    if ( encode === void 0 ) encode = false;\n\r\n    return Object.keys(query)\r\n        .map(function (key) { return (key + \"=\" + (encode ? encodeURIComponent(query[key]) : query[key])); })\r\n        .join('&');\r\n}\n\n/**\r\n * 请求参数对象转成请求参数字符串\r\n * @param dat 请求参数\r\n */\r\nfunction queryString(dat) {\r\n    var queryStr;\r\n    if (dat) {\r\n        queryStr = Object.keys(dat)\r\n            .map(function (key) {\r\n            return (key + \"=\" + (encodeURIComponent(dat[key])));\r\n        })\r\n            .join('&');\r\n    }\r\n    else {\r\n        queryStr = '';\r\n    }\r\n    return queryStr;\r\n}\n\n/**\r\n * 时间分割正则\r\n */\r\nvar DATE_REGEXP = /[^\\d]+/;\r\n/**\r\n * 转换对象为JS Date对象\r\n * @param   date   <可选> 日期数据(时间戳, 字符串, Date对象, 空)\r\n * @param   offset 修正偏移的秒数\r\n * @return         返回JS Date对象 / NULL 日期格式错误\r\n */\r\nfunction toDate(date, offset) {\r\n    var ts;\r\n    if (date instanceof Date) {\r\n        ts = date;\r\n    }\r\n    else if (isNumber(date)) {\r\n        ts = new Date(date);\r\n    }\r\n    else if (isNaN(+date)) {\r\n        if (isString(date)) {\r\n            date = date.split(DATE_REGEXP);\r\n            if (date.length === 3) {\r\n                ts = new Date(+date[0], date[1] - 1, +date[2], 0, 0, 0, 0);\r\n                if (isNaN(+ts)) {\r\n                    ts = null;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    if (!ts) {\r\n        if (!date) {\r\n            return null;\r\n        }\r\n        ts = new Date();\r\n        if (date > 5e8) {\r\n            // 时间戳\r\n            ts.setTime(date * 1000);\r\n        }\r\n        else {\r\n            // 时间偏移(秒数)\r\n            ts.setTime(ts.getTime() + date * 1000);\r\n        }\r\n    }\r\n    if (!isNaN(Number(offset))) {\r\n        ts.setTime(ts.getTime() + offset * 1000);\r\n    }\r\n    return ts;\r\n}\n\n/**\r\n * 日期格式化格式匹配正则\r\n */\r\nvar FORMAT_REGEXP = /[YymndjNwaAghGHisT]/g;\r\n/**\r\n * 按照指定格式将日期对象或时间戳转化为日期字符串\r\n * @param  date   日期对象或时间戳\r\n * @param  format 日期格式\r\n * @param  offset 修正偏移的秒数\r\n * @return        日期\r\n */\r\nfunction date(date, format, offset) {\r\n    format = format || \"Y-m-d H:i:s\";\r\n    var timestamp = toDate(date, offset);\r\n    if (timestamp === null) {\r\n        timestamp = new Date();\r\n    }\r\n    return format.replace(FORMAT_REGEXP, function formatCallback(tag) {\r\n        switch (tag) {\r\n            case \"Y\": return timestamp.getFullYear();\r\n            case \"y\": return timestamp.getFullYear() % 100;\r\n            case \"m\": return fix0(timestamp.getMonth() + 1, 2);\r\n            case \"n\": return timestamp.getMonth() + 1;\r\n            case \"d\": return fix0(timestamp.getDate(), 2);\r\n            case \"j\": return timestamp.getDate();\r\n            case \"N\": return timestamp.getDay();\r\n            case \"w\": return timestamp.getDay() % 7;\r\n            case \"a\": return timestamp.getHours() < 12 ? \"am\" : \"pm\";\r\n            case \"A\": return timestamp.getHours() < 12 ? \"AM\" : \"PM\";\r\n            case \"g\": return timestamp.getHours() % 12 + 1;\r\n            case \"h\": return fix0(timestamp.getHours() % 12 + 1, 2);\r\n            case \"G\": return timestamp.getHours();\r\n            case \"H\": return fix0(timestamp.getHours(), 2);\r\n            case \"i\": return fix0(timestamp.getMinutes(), 2);\r\n            case \"s\": return fix0(timestamp.getSeconds(), 2);\r\n            case \"T\": return Math.round(timestamp.getTime() / 1000);\r\n        }\r\n        return tag;\r\n    });\r\n}\n\n/**\r\n * 是否是正则\r\n * @param subject 待判断数据\r\n */\r\nfunction isRegexp(subject) {\r\n    return is(subject, \"regexp\");\r\n}\n\n/**\r\n * 是否是错误对象\r\n * @param subject 待判断数据\r\n */\r\nfunction isError(subject) {\r\n    return is(subject, \"error\");\r\n}\n\n/**\r\n * 是否是布尔值\r\n * @param  subject 待判断的数据\r\n */\r\nfunction isBoolean(subject) {\r\n    return is(subject, \"boolean\");\r\n}\n\n/**\r\n * 浮点数字精度处理\r\n * @param  num   待处理数字\r\n * @param  dec   精度\r\n * @return       处理后的数字\r\n */\r\nfunction getNumberWithDec(num, dec) {\r\n    var pow10s = Math.pow(10, dec || 0);\r\n    return (dec) ? Math.round(pow10s * num) / pow10s : num;\r\n}\n\n/**\r\n * 获取一组数组中的平均数\r\n * @param  arr 待处理数组\r\n * @param  dec 保留精度\r\n * @return     平均数\r\n */\r\nfunction getNumberAverage(arr, dec) {\r\n    var i = arr.length, sum = 0;\r\n    while (i--) {\r\n        sum += arr[i];\r\n    }\r\n    return getNumberWithDec((sum / arr.length), dec);\r\n}\n\n/**\r\n * 获取一组数组中的方差\r\n * @param  arr 待处理数组\r\n * @param  dec 保留精度\r\n * @return     方差\r\n */\r\nfunction getNumberVariance(arr, dec) {\r\n    var avg = getNumberAverage(arr, dec), i = arr.length, v = 0;\r\n    while (i--) {\r\n        v += Math.pow((arr[i] - avg), 2);\r\n    }\r\n    v /= (arr.length - 1);\r\n    return getNumberWithDec(v, dec);\r\n}\n\n/**\r\n * 获取一组数组中的标准差\r\n * @param  arr  待处理数组\r\n * @param  dec  保留精度\r\n * @return      标准差\r\n */\r\nfunction getStdDeviation(arr, dec) {\r\n    var stdDev = Math.sqrt(getNumberVariance(arr, dec));\r\n    return getNumberWithDec(stdDev, dec);\r\n}\n\n/**\r\n * 解析输入文本，输出带对应 kv 的对象\r\n * @param str        待处理字符串\r\n * @param separator  分割符号\r\n * @param assignment 赋值符号\r\n * @param ignore     需要排除的数据标识\r\n * @param decode     是否执行 decode 操作\r\n */\r\nfunction parseStr(str, separator, assignment, ignore, decode) {\n    if ( separator === void 0 ) separator = \"&\";\n    if ( assignment === void 0 ) assignment = \"=\";\n    if ( ignore === void 0 ) ignore = /^#/;\n    if ( decode === void 0 ) decode = true;\n\r\n    if (isString(str)) {\r\n        var subject = str.split(separator).reduce(function (res, part) {\r\n            if (ignore.test(part)) {\r\n                return res;\r\n            }\r\n            var partArr = part.split(assignment);\r\n            res[partArr[0]] = decode && !isUndefined(partArr[1]) ? decodeURIComponent(partArr[1]) : partArr[1];\r\n            return res;\r\n        }, Object.create(null));\r\n        return subject;\r\n    }\r\n    else {\r\n        return {};\r\n    }\r\n}\n\nfunction addQuery(url, query) {\r\n    var extQueryStr = \"\";\r\n    if (isObject(query)) {\r\n        extQueryStr = serialize(query);\r\n    }\r\n    return (\"\" + url + (url.indexOf(\"?\") !== -1 ? \"&\" : \"?\") + extQueryStr);\r\n}\n\nvar EXP_STR = \"Thu, 01 Jan 1970 00:00:00 GMT\";\r\n// cookie写操作，过期时间单位(s)\r\nfunction set(name, value, config) {\r\n    config = extend({\r\n        \"path\": \"/\"\r\n    }, config || {});\r\n    var defVal = {\r\n        \"path\": \"/\"\r\n    };\r\n    var cookie = [(name + \"=\" + value)];\r\n    Object.keys(config).forEach(function (key) {\r\n        if (key === \"expires\" && config.expires) {\r\n            return cookie.push(\"expires=\" + new Date(+new Date() + config.expires * 24 * 3600 * 1000).toUTCString());\r\n        }\r\n        cookie.push((key + \"=\" + (config[key] || defVal[key] || \"\")));\r\n    });\r\n    document.cookie = cookie.join(\";\");\r\n}\r\nfunction get(name) {\r\n    return document.cookie.replace(new RegExp(\".*(?:^|; )\" + name + \"=([^;]*).*|.*\"), \"$1\");\r\n}\r\nfunction remove(name, path) {\r\n    path = path || \"/\";\r\n    var value = get(name);\r\n    if (value) {\r\n        return document.cookie = name + \"=\" + value + \"; expires=\" + EXP_STR + \"; path=\" + path;\r\n    }\r\n}\r\nvar cookie = {\r\n    get: get,\r\n    set: set,\r\n    remove: remove\r\n};\n\nexport { addQuery, cookie, copy, date, each, extend, fix0, getNumberAverage, getNumberVariance, getNumberWithDec, getStdDeviation, is, isArray, isBoolean, isError, isFunction, isNull, isNumber, isObject, isRegexp, isString, isUndefined, isValidArray, labelReplace, labelReplaceExp, merge, numberFormat, parseStr, queryString, random, serialize, shuffle, toArray, toDate, toUnderlineName };\n//# sourceMappingURL=index.esm.js.map\n","import { isFunction, isString, isUndefined, labelReplace } from \"@x-drive/utils\";\nconst ComponentName = \"x-launch-weapp\";\n\n/**支持的平台对应的标签 */\nconst LaunchType = {\n    /**微信 */\n    \"wechat\": \"wx-open-launch-weapp\"\n};\n\n/**模版缓存 */\nconst TPLCache = {};\n\n/**\n * 模版处理函数\n * @param strs 模版静态字符串段落数组\n * @param rest 模版插值数组\n */\nfunction getTypeTpl(strs, ...rest) {\n    return strs.reduce((tpl, str, index) => {\n        tpl += str;\n\n        switch (rest[index]) {\n            case \"wechat\":\n                tpl += LaunchType.wechat;\n                break;\n        }\n        return tpl;\n    }, \"\");\n}\n\n/**\n * 获取目标平台的模版\n * @param type 模版类型\n */\nfunction getTplStr(type: string = \"wechat\") {\n    if (TPLCache[type]) {\n        return TPLCache[type];\n    }\n    TPLCache[type] = getTypeTpl`<style>\n:host {\n    margin: 0;\n    padding: 0;\n    position: relative;\n    display:inline-block;\n}\n.X-wechat-launch-weapp-slot {\n    z-index:0;\n    position:relative;\n}\n.X-wechat-launch-weapp-btn {\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    z-index: 3;\n    position: absolute;\n}\n</style>\n<div class=\"X-wechat-launch-weapp\">\n    <div class=\"X-wechat-launch-weapp-btn\">\n        <${type} style=\"width:100%;height:100%;display:block;\" username=\"{username}\" path=\"{path}\">\n        <template>\n            <div style=\"{style}\"></div>\n        </template>\n        </${type}>\n    </div>\n    <div class=\"X-wechat-launch-weapp-slot\">\n        <slot></slot>\n    </div>\n</div>`;\n    return TPLCache[type];\n}\n\n/**H5 拉起小程序 */\nclass XWechatLaunchWeapp extends HTMLElement {\n    constructor() {\n        super();\n        this.init();\n    }\n\n    /**模块名称 */\n    name: string = \"x-launch-weapp\";\n\n    /**模块根结点 */\n    root: ShadowRoot;\n\n    /**模块初始化状态 */\n    private status = false;\n\n    private init() {\n        if (this.status) {\n            return;\n        }\n        this.root = this.attachShadow({\n            \"mode\": \"open\"\n        });\n        this.status = true;\n    }\n\n    connectedCallback() {\n        const type = this.getAttribute(\"type\");\n        const path = this.getAttribute(\"path\") || \"\";\n        const username = this.getAttribute(\"username\") || \"\";\n        const debug = this.hasAttribute(\"debug\");\n\n        const { width, height } = this.getBoundingClientRect();\n        const style = `width:${width}px;height:${height}px;display:block;${debug ? \"background:#e92a2a54;\" : \"\"}`;\n\n        this.root.innerHTML = labelReplace(\n            getTplStr(type)\n            , {\n                username\n                , path\n                , style\n            }\n        );\n    }\n}\n\ncustomElements.define(ComponentName, XWechatLaunchWeapp);\n\n/**\n * 提供给外部框架挂载用的方法\n * @param frame 框架对象\n * @example\n * ```ts\n * import Vue from \"vue\";\n * import launchWeapp from \"[at]x-drive/x-launch-weapp;\n * Vue.use(launchWeapp);\n * ```\n */\nfunction install(frame) {\n    if (!isUndefined(frame)) {\n        if (isString(frame.name) && frame.name.toLowerCase() === \"vue\" && isFunction(frame.component)) {\n            frame.component(ComponentName);\n        }\n    }\n}\n\nexport default install;"],"names":["const","super"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,EAAE,CAAC,OAAO,EAAE,IAAI,EAAE;AAC3B,IAAI,OAAO,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,KAAK,IAAI,CAAC;AACjG,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,SAAS,QAAQ,CAAC,OAAO,EAAE;AAC3B,IAAI,OAAO,EAAE,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;AACjC,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,SAAS,WAAW,CAAC,OAAO,EAAE;AAC9B,IAAI,OAAO,EAAE,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;AACpC,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,IAAI,eAAe,GAAG,YAAY,CAAC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,YAAY,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE;AACvC,IAAI,KAAK,IAAI,KAAK,KAAK,CAAC,KAAG,IAAI,GAAG,KAAK,GAAC;AACxC;AACA,IAAI,OAAO,GAAG,CAAC,OAAO,CAAC,eAAe,EAAE,UAAU,CAAC,EAAE,GAAG,EAAE;AAC1D,QAAQ,IAAI,EAAE,GAAG,QAAQ,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;AACnD,QAAQ,IAAI,WAAW,CAAC,EAAE,CAAC,IAAI,IAAI,EAAE;AACrC,YAAY,OAAO,CAAC,CAAC;AACrB,SAAS;AACT,QAAQ,OAAO,EAAE,CAAC;AAClB,KAAK,CAAC,CAAC;AACP,CAAC;AAkBD;AACA;AACA;AACA;AACA;AACA,SAAS,UAAU,CAAC,OAAO,EAAE;AAC7B,IAAI,OAAO,EAAE,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;AACnC,CAAC;AAiGD;AACA;AACA;AACA;AACA;AACA,SAAS,QAAQ,CAAC,OAAO,EAAE;AAC3B,IAAI,OAAO,EAAE,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;AACjC;;;ACtLA,AACAA,IAAM,aAAa,GAAG,gBAAgB,CAAC;AAEvC;AACAA,IAAM,UAAU,GAAG;;IAEf,QAAQ,EAAE,sBAAsB;CACnC,CAAC;AAEF;AACAA,IAAM,QAAQ,GAAG,EAAE,CAAC;AAEpB;;;;;AAKA,SAAS,UAAU,CAAC,IAAa;;;;IAC7B,OAAO,IAAI,CAAC,MAAM,WAAE,GAAG,EAAE,GAAG,EAAE,KAAK;QAC/B,GAAG,IAAI,GAAG,CAAC;QAEX,QAAQ,IAAI,CAAC,KAAK,CAAC;YACf,KAAK,QAAQ;gBACT,GAAG,IAAI,UAAU,CAAC,MAAM,CAAC;gBACzB,MAAM;SACb;QACD,OAAO,GAAG,CAAC;KACd,EAAE,EAAE,CAAC,CAAC;AACX,CAAC;AAED;;;;AAIA,SAAS,SAAS,CAAC,IAAuB;kCAAR;;IAC9B,IAAI,QAAQ,CAAC,IAAI,CAAC,EAAE;QAChB,OAAO,QAAQ,CAAC,IAAI,CAAC,CAAC;KACzB;IACD,QAAQ,CAAC,IAAI,CAAC,GAAG,UAAU,iBAsBpB,MAIC,KAKL,CAAC;IACJ,OAAO,QAAQ,CAAC,IAAI,CAAC,CAAC;AAC1B,CAAC;AAED;AACA,IAAM,kBAAmB;IACrB;QACIC,gBAAK,MAAE,CAAC;;QAKZ,SAAI,GAAW,gBAAgB,CAAC;;QAMxB,WAAM,GAAG,KAAK,CAAC;QAVnB,IAAI,CAAC,IAAI,EAAE,CAAC;;;;;kEACf;iCAWO;QACJ,IAAI,IAAI,CAAC,MAAM,EAAE;YACb,OAAO;SACV;QACD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC;YAC1B,MAAM,EAAE,MAAM;SACjB,CAAC,CAAC;QACH,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;MACtB;iCAED;QACID,IAAM,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QACvCA,IAAM,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;QAC7CA,IAAM,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;QACrDA,IAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;eAElB,GAAG,IAAI,CAAC,qBAAqB;QAA5C;QAAO,wBAAwC;QACvDA,IAAM,KAAK,GAAG,WAAS,KAAK,kBAAa,MAAM,0BAAoB,KAAK,GAAG,uBAAuB,GAAG,GAAI,CAAC;QAE1G,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,YAAY,CAC9B,SAAS,CAAC,IAAI,CAAC,EACb;sBACE,QAAQ;kBACN,IAAI;mBACJ,KAAK;SACV,CACJ,CAAC;;;;EAzCuB,cA2ChC;AAED,cAAc,CAAC,MAAM,CAAC,aAAa,EAAE,kBAAkB,CAAC,CAAC;AAEzD;;;;;;;;;;AAUA,SAAS,OAAO,CAAC,KAAK;IAClB,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE;QACrB,IAAI,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,KAAK,IAAI,UAAU,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE;YAC3F,KAAK,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;SAClC;KACJ;AACL,CAAC;;;;"}